import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import CommandStart
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

from promo_db import (init_db, save_promocode, promocode_exists, 
                     count_subscriptions_period, get_total_users, get_hourly_stats, 
                     calculate_conversion, get_trend_analysis, get_recent_users, 
                     get_active_users_count, get_last_broadcast_date, 
                     get_promocode_stats, get_current_settings, create_csv_export,
                     get_subscribed_users_count, get_unsubscribed_users_count, 
                     get_user_by_id, create_admin_csv_export)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class BroadcastState(StatesGroup):
    waiting_message = State()

class UserSearchState(StatesGroup):
    waiting_user_id = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
load_dotenv()
BOT_TOKEN = "7094351521:AAGGGNoq_4F1jjmMmJjMaMHp5jWFcuYQVkY"
CHANNEL_USERNAME = "@dsgcomplex"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ .env –∏–ª–∏ –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()
ADMINS = [125861752, 1506368833]

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_main_keyboard(is_admin=False):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/dsgcomplex"))
    keyboard.add(InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="get_promocode"))
    
    if is_admin:
        keyboard.add(InlineKeyboardButton("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    
    return keyboard

def get_admin_main_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
    )
    keyboard.add(
        InlineKeyboardButton("üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
        InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin_promocodes")
    )
    keyboard.add(
        InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings"),
        InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç", callback_data="admin_export")
    )
    keyboard.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    return keyboard

def get_back_keyboard(back_to="admin_panel"):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=back_to))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(CommandStart())
async def start(message: types.Message):
    is_admin = message.from_user.id in ADMINS
    keyboard = get_main_keyboard(is_admin)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
    try:
        with open("welcome_image.png", "rb") as photo:
            await message.answer_photo(
                photo,
                caption="üî• <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DSG COMPLEX!</b>\n\n"
                        "üéÅ –ü–æ–ª—É—á–∏—Ç–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n\n"
                        "üëá –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥:",
                reply_markup=keyboard
            )
    except Exception as e:
        # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")
        await message.answer(
            "üî• <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DSG COMPLEX!</b>\n\n"
            "üéÅ –ü–æ–ª—É—á–∏—Ç–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n\n"
            "üëá –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥:",
            reply_markup=keyboard
        ) @dp.message_handler(commands=['admin'])
async def admin_command(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_users = get_subscribed_users_count()
    new_24h = count_subscriptions_period(1)
    new_7d = count_subscriptions_period(7)
    unsubscribed = get_unsubscribed_users_count()
    
    stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏: {total_users}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ 24—á: {new_24h}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {new_7d}
‚Ä¢ –û—Ç–ø–∏—Å–∞–ª–∏—Å—å: {unsubscribed}

‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: —Ç–æ–ª—å–∫–æ —á—Ç–æ"""
    
    keyboard = get_admin_main_keyboard()
    await message.answer(stats_text, reply_markup=keyboard)

@dp.message_handler(commands=['export'])
async def export_command(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    try:
        csv_file = create_admin_csv_export()
        
        with open(csv_file, 'rb') as file:
            await message.answer_document(
                file,
                caption="üìÑ <b>–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n–§–æ—Ä–º–∞—Ç: user_id, username, first_name, promocode, subscribed_at, subscribed"
            )
        
        os.remove(csv_file)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞.")

@dp.message_handler(commands=['check'])
async def check_user_command(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n–ü—Ä–∏–º–µ—Ä: <code>/check 123456789</code>")
        return
    
    try:
        user_id = int(parts[1])
        user_data = get_user_by_id(user_id)
        
        if not user_data:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        username = f"@{user_data['username']}" if user_data['username'] else "–ù–µ —É–∫–∞–∑–∞–Ω"
        subscribed_at = user_data['subscribed_at'] or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        subscribed_status = "‚úÖ –î–∞" if user_data['subscribed'] else "‚ùå –ù–µ—Ç"
        
        user_info = f"""üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>

üÜî <b>ID:</b> <code>{user_data['user_id']}</code>
üë§ <b>–ò–º—è:</b> {user_data['first_name']}
üìù <b>Username:</b> {username}
üéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> <code>{user_data['promocode']}</code>
üìÖ <b>–î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b> {subscribed_at}
‚úÖ <b>–ü–æ–¥–ø–∏—Å–∞–Ω:</b> {subscribed_status}"""
        
        await message.answer(user_info)
        
    except ValueError:
        await message.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.callback_query_handler(lambda c: c.data == "get_promocode")
async def process_promocode(callback_query: types.CallbackQuery):
    await callback_query.answer()

    user = callback_query.from_user
    user_id = user.id

    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
        await callback_query.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if member.status not in ['member', 'creator', 'administrator']:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/dsgcomplex"))
        keyboard.add(InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="get_promocode"))
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        
        await callback_query.message.edit_text(
            "‚ùå <b>–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!</b>\n\n"
            "üîó –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª <b>DSG COMPLEX</b> –∏ –ø–æ–ª—É—á–∏—Ç–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
            reply_markup=keyboard
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ —É–∂–µ –≤—ã–¥–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥
    existing_code = promocode_exists(user_id)
    if existing_code:
        promo = existing_code
    else:
        promo = f"DSG{user_id}"
        save_promocode(user_id, user.username or "", user.first_name or "", promo)

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    await callback_query.message.edit_text(
        f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
        f"‚úÖ –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: <code>{promo}</code>\n\n"
        f"üí∞ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏!",
        reply_markup=keyboard
    )

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query_handler(lambda c: c.data == "main_menu")
async def main_menu(callback_query: types.CallbackQuery):
    is_admin = callback_query.from_user.id in ADMINS
    keyboard = get_main_keyboard(is_admin)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º  
    try:
        with open("welcome_image.png", "rb") as photo:
            await callback_query.message.answer_photo(
                photo,
                caption="üî• <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DSG COMPLEX!</b>\n\n"
                        "üéÅ –ü–æ–ª—É—á–∏—Ç–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n\n"
                        "üëá –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥:",
                reply_markup=keyboard
            )
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.delete()
    except Exception as e:
        # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_text
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ main_menu: {e}")
        await callback_query.message.edit_text(
            "üî• <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DSG COMPLEX!</b>\n\n"
            "üéÅ –ü–æ–ª—É—á–∏—Ç–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n\n"
            "üëá –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥:",
            reply_markup=keyboard
        )
    
    await callback_query.answer() 
# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@dp.callback_query_handler(lambda c: c.data == "admin_panel")
async def admin_panel(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMINS:
        await callback_query.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    keyboard = get_admin_main_keyboard()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–æ—Ç–æ)
    try:
        await callback_query.message.edit_text(
            "üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:",
            reply_markup=keyboard
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback_query.message.answer(
            "üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:",
            reply_markup=keyboard
        )
    
    await callback_query.answer()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω
@dp.callback_query_handler(lambda c: c.data == "admin_stats")
async def admin_stats(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMINS:
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_users = get_subscribed_users_count()
    new_24h = count_subscriptions_period(1)
    new_7d = count_subscriptions_period(7)
    unsubscribed = get_unsubscribed_users_count()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    today_count = count_subscriptions_period(1)
    week_count = count_subscriptions_period(7)
    month_count = count_subscriptions_period(30)
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("üìà –ü–æ–¥—Ä–æ–±–Ω–æ", callback_data="admin_stats_detailed"),
        InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫", callback_data="admin_stats_chart")
    )
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    
    stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏: {total_users}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ 24—á: {new_24h}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {new_7d}
‚Ä¢ –û—Ç–ø–∏—Å–∞–ª–∏—Å—å: {unsubscribed}

üìà <b>–ü–æ –ø–µ—Ä–∏–æ–¥–∞–º:</b>
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {today_count}
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {week_count}
‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {month_count}

üíπ <b>–ö–æ–Ω–≤–µ—Ä—Å–∏—è:</b> {calculate_conversion()}%

‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: —Ç–æ–ª—å–∫–æ —á—Ç–æ"""
    
    await callback_query.message.edit_text(stats_text, reply_markup=keyboard)
    await callback_query.answer()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@dp.callback_query_handler(lambda c: c.data == "admin_users")
async def admin_users(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMINS:
        return
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user"),
        InlineKeyboardButton("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ", callback_data="admin_recent_users")
    )
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    
    recent_users = get_recent_users(5)
    if recent_users:
        users_text = "\n".join([f"‚Ä¢ {u['name']} (@{u['username'] or '–Ω–µ—Ç'}) - {u['date']}" for u in recent_users])
    else:
        users_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    await callback_query.message.edit_text(
        f"üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        f"üÜï <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n{users_text}",
        reply_markup=keyboard
    )
    await callback_query.answer()

# –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(lambda c: c.data == "admin_search_user")
async def admin_search_user(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMINS:
        return
    
    keyboard = get_back_keyboard("admin_users")
    
    await callback_query.message.edit_text(
        "üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=keyboard
    )
    
    await UserSearchState.waiting_user_id.set()
    await callback_query.answer()

@dp.message_handler(state=UserSearchState.waiting_user_id)
async def process_user_search(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return
    
    try:
        user_id = int(message.text.strip())
        user_data = get_user_by_id(user_id)
        
        if not user_data:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        username = f"@{user_data['username']}" if user_data['username'] else "–ù–µ —É–∫–∞–∑–∞–Ω"
        subscribed_at = user_data['subscribed_at'] or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        subscribed_status = "‚úÖ –î–∞" if user_data['subscribed'] else "‚ùå –ù–µ—Ç"
        
        user_info = f"""üë§ <b>–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>

üÜî <b>ID:</b> <code>{user_data['user_id']}</code>
üë§ <b>–ò–º—è:</b> {user_data['first_name']}
üìù <b>Username:</b> {username}
üéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> <code>{user_data['promocode']}</code>
üìÖ <b>–î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b> {subscribed_at}
‚úÖ <b>–ü–æ–¥–ø–∏—Å–∞–Ω:</b> {subscribed_status}"""
        
        keyboard = get_back_keyboard("admin_users")
        await message.answer(user_info, reply_markup=keyboard)
        
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")
    
    await state.finish()

# –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
@dp.callback_query_handler(lambda c: c.data == "admin_export")
async def admin_export(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMINS:
        return
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("üìÑ –°–∫–∞—á–∞—Ç—å CSV", callback_data="export_csv"),
        InlineKeyboardButton("üìä –û—Ç—á–µ—Ç", callback_data="export_report")
    )
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    
    await callback_query.message.edit_text(
        "üì• <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö:\n\n"
        "üìÑ <b>CSV</b> - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "üìä <b>–û—Ç—á–µ—Ç</b> - —Å–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        reply_markup=keyboard
    )
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "export_csv")
async def export_csv(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMINS:
        return
    
    try:
        await callback_query.answer("‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...")
        
        csv_file = create_admin_csv_export()
        
        with open(csv_file, 'rb') as file:
            await bot.send_document(
                callback_query.from_user.id,
                file,
                caption="üìÑ <b>–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n–§–æ—Ä–º–∞—Ç: user_id, username, first_name, promocode, subscribed_at, subscribed"
            )
        
        os.remove(csv_file)
        await callback_query.message.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞", show_alert=True)

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
@dp.callback_query_handler(lambda c: c.data in ["admin_broadcast", "admin_promocodes", "admin_settings", "export_report", "admin_stats_detailed", "admin_stats_chart", "admin_recent_users"])
async def admin_placeholder(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMINS:
        return
    
    functions_names = {
        "admin_broadcast": "üì® –†–∞—Å—Å—ã–ª–∫–∞",
        "admin_promocodes": "üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏", 
        "admin_settings": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        "export_report": "üìä –û—Ç—á–µ—Ç",
        "admin_stats_detailed": "üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "admin_stats_chart": "üìä –ì—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
        "admin_recent_users": "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    }
    
    function_name = functions_names.get(callback_query.data, "–§—É–Ω–∫—Ü–∏—è")
    
    await callback_query.answer(f"üöß {function_name} - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True) 